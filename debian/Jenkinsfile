#!groovy

// Current version of this Pipeline https://github.com/VitexSoftware/BuildImages/blob/main/Test/Jenkinsfile-parael
// Updated for python3-tapo with dynamic source download from PyPI

String[] distributions = ['debian:trixie', 'debian:forky', 'ubuntu:jammy', 'ubuntu:noble']

String vendor = 'vitexsoftware'
String imagePrefix = 'multiflexi-'

// Package specific variables
String PYPI_PACKAGE = 'tapo'
String UPSTREAM_VERSION = ''
String DEBIAN_VERSION = ''

properties([
    copyArtifactPermission('*')
])
node() {
    ansiColor('xterm') {
        stage('SCM Checkout') {
            checkout scm
        }
    }
}

def branches = [:]
distributions.each { distro ->
    branches[distro] = {
        def distroName = distro
        println  "Dist:" + distroName

        def dist = distroName.split(':')
        def distroCode = dist[1]
        def buildImage = ''
        def artifacts = []
        def buildVer = ''

        node {
        ansiColor('xterm') {
                stage('Checkout ' + distroName) {
                    checkout scm
                    def imageName = vendor + '/' + imagePrefix + distroCode + ':latest'
                    buildImage = docker.image(imageName)
                    sh 'git checkout debian/changelog'
                    def version = sh (
                        script: 'dpkg-parsechangelog --show-field Version',
                        returnStdout: true
                    ).trim()
                    buildVer = version + '.' + env.BUILD_NUMBER  + '~' + distroCode
                }
                
                stage('Update Sources ' + distroName) {
                buildImage.inside {
                    sh 'sudo apt-get update --allow-releaseinfo-change'
                    sh 'sudo apt-get install -y python3-pip python3-setuptools curl jq'
                    
                    // Get current version from PyPI
                    UPSTREAM_VERSION = sh(
                        script: "curl -s https://pypi.org/pypi/${PYPI_PACKAGE}/json | jq -r '.info.version'",
                        returnStdout: true
                    ).trim()
                    
                    DEBIAN_VERSION = UPSTREAM_VERSION + '-1'
                    
                    echo "Found upstream version: ${UPSTREAM_VERSION}"
                    echo "Debian package version will be: ${DEBIAN_VERSION}"
                    
                    // Download and extract wheel
                    sh """
                        echo "Downloading tapo wheel from PyPI..."
                        rm -rf tapo-* *.whl
                        python3 -m pip download --no-deps --only-binary=:all: tapo==${UPSTREAM_VERSION}
                        
                        echo "Extracting wheel contents..."
                        WHEEL_FILE=\$(ls tapo-${UPSTREAM_VERSION}-*.whl | head -1)
                        echo "Found wheel file: \$WHEEL_FILE"
                        mkdir -p tapo-${UPSTREAM_VERSION}
                        cd tapo-${UPSTREAM_VERSION} && python3 -m zipfile -e "../\$WHEEL_FILE" .
                        cd .. && ls -la tapo-${UPSTREAM_VERSION}/
                    """.stripIndent()
                    
                    // Update debian/changelog
                    sh """
                        echo "Updating debian/changelog with version ${DEBIAN_VERSION}..."
                        cat > debian/changelog.new << EOF
python3-tapo (${DEBIAN_VERSION}) unstable; urgency=medium

  * Automated build for upstream version ${UPSTREAM_VERSION}
  * Downloaded from PyPI: https://pypi.org/project/tapo/${UPSTREAM_VERSION}/
  * Built on \$(date -R)
  * Build: ${BUILD_TAG}

 -- Vitex Software <info@vitexsoftware.com>  \$(date -R)

EOF
                        if [ -f debian/changelog ]; then
                            echo "" >> debian/changelog.new
                            tail -n +2 debian/changelog >> debian/changelog.new
                        fi
                        mv debian/changelog.new debian/changelog
                    """.stripIndent()
                    
                    // Update setup.py with current version
                    sh "sed -i \"s/version='[^']*'/version='${UPSTREAM_VERSION}'/\" setup.py"
                    
                    // Update rules file with current version
                    sh "sed -i \"s/TAPO_VERSION := [0-9.]\\+/TAPO_VERSION := ${UPSTREAM_VERSION}/\" debian/rules || echo 'Rules file update skipped'"
                    
                    // Update version for the build process
                    def newVersion = sh(
                        script: 'dpkg-parsechangelog --show-field Version',
                        returnStdout: true
                    ).trim()
                    buildVer = newVersion + '.' + env.BUILD_NUMBER + '~' + distroCode
                    
                    echo "Updated package version to ${buildVer}"
                }
            }
                stage('Build ' + distroName) {
                    buildImage.inside {
                        sh 'dch -b -v ' + buildVer  + ' "' + env.BUILD_TAG  + '"'
                        sh 'sudo apt-get update --allow-releaseinfo-change'
                        sh 'sudo chown jenkins:jenkins ..'
                        sh 'debuild-pbuilder  -i -us -uc -b'
                        sh 'mkdir -p $WORKSPACE/dist/debian/ ; rm -rf $WORKSPACE/dist/debian/* ; for deb in $(cat debian/files | awk \'{print $1}\'); do mv "../$deb" $WORKSPACE/dist/debian/; done'
                        artifacts = sh (
                            script: "cat debian/files | awk '{print \$1}'",
                            returnStdout: true
                        ).trim().split('\n')
                    }
                }

                stage('Test ' + distroName) {
                    buildImage.inside {
                        def debconf_debug = 0 //Set to "5" or "developer" to debug debconf
                        sh 'cd $WORKSPACE/dist/debian/ ; dpkg-scanpackages . /dev/null > Packages; gzip -9c Packages > Packages.gz; cd $WORKSPACE'
                        sh 'echo "deb [trusted=yes] file://///$WORKSPACE/dist/debian/ ./" | sudo tee /etc/apt/sources.list.d/local.list'
                        sh 'sudo apt-get update --allow-releaseinfo-change'
                        sh 'echo "INSTALATION"'
                        artifacts.each { deb_file ->
                            if (deb_file.endsWith('.deb')) {
                                def pkgName = deb_file.tokenize('/')[-1].replaceFirst(/_.*/, '')
                                sh 'echo -e "${GREEN} installing ' + pkgName + ' on `lsb_release -sc` ${ENDCOLOR} "'
                                sh 'sudo DEBIAN_FRONTEND=noninteractive DEBCONF_DEBUG=' + debconf_debug + ' apt-get -y install ' + pkgName + ' || sudo apt-get -y -f install'
                            }
                        }
                    }
                }
                stage('Archive artifacts ' + distroName ) {
                    // Only run if previous stages (Build and Test) succeeded
                    buildImage.inside {
                        // Archive all produced artifacts listed in debian/files
                        artifacts.each { deb_file ->
                            println "Archiving artifact: " + deb_file
                            archiveArtifacts artifacts: 'dist/debian/' + deb_file
                        }

                        // Cleanup: remove any produced files named in debian/files
                        // Try both the dist location and any potential original locations referenced by debian/files
                        sh '''
                            set -e
                            if [ -f debian/files ]; then
                              while read -r file _; do
                                [ -n "$file" ] || continue
                                rm -f "dist/debian/$file" || true
                                rm -f "../$file" || true
                                rm -f "$WORKSPACE/$file" || true
                              done < debian/files
                            fi
                        '''
                    }
                }
            }
        }
    }
}
parallel branches

node {
    stage('Publish to Aptly') {
        publishDebToAptly()
    }
}
